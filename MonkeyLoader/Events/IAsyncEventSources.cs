using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonkeyLoader.Events
{
    /// <summary>
    /// Delegate for the <see cref="IEventSource{TEvent}.Dispatching"/> event.
    /// </summary>
    /// <typeparam name="TEvent">The type representing the async event arguments.</typeparam>
    /// <param name="eventData">An object containing all the relevant information for the async event.</param>
    public delegate Task AsyncEventDispatching<in TEvent>(TEvent eventData)
        where TEvent : class;

    /// <summary>
    /// Delegate for the <see cref="ICancelableAsyncEventSource{TEvent}.Dispatching"/> event.
    /// </summary>
    /// <typeparam name="TEvent">The type representing the cancelable async event arguments.</typeparam>
    /// <param name="eventData">An object containing all the relevant information for the async event, including canceling the action.</param>
    public delegate Task CancelableAsyncEventDispatching<in TEvent>(TEvent eventData)
        where TEvent : class, ICancelableEvent, IAsyncEvent;

    /// <summary>
    /// Defines the interface for sources of a certain type of async events.
    /// </summary>
    /// <typeparam name="TEvent">The type of async events generated by this source.</typeparam>
    public interface IAsyncEventSource<out TEvent> where TEvent : class
    {
        /// <summary>
        /// Needs to be invoked when an event is generated with a new instance of the async event.
        /// </summary>
        public event AsyncEventDispatching<TEvent>? Dispatching;
    }

    /// <summary>
    /// Defines the interface for sources of a certain type of cancelable async events.
    /// </summary>
    /// <typeparam name="TEvent">The type of cancelable async events generated by this source.</typeparam>
    public interface ICancelableAsyncEventSource<out TEvent> where TEvent : class, ICancelableEvent, IAsyncEvent
    {
        /// <summary>
        /// Needs to be invoked when an event is generated with a new instance of the cancelable async event.
        /// </summary>
        /// <remarks>
        /// When the event's <see cref="ICancelableEvent.Canceled">Canceled</see>
        /// property is <c>true</c>, the default action should be prevented from happening.
        /// </remarks>
        public event CancelableAsyncEventDispatching<TEvent>? Dispatching;
    }
}